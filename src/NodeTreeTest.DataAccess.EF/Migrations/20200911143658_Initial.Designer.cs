// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodeTreeTest.DataAccess.EF;

namespace NodeTreeTest.DataAccess.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200911143658_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NodeTreeTest.DataAccess.Abstractions.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Application","Dbo");
                });

            modelBuilder.Entity("NodeTreeTest.DataAccess.Abstractions.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<short?>("DocumentType")
                        .HasColumnType("smallint");

                    b.Property<short>("NodeType")
                        .HasColumnType("smallint");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryParameter")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Token","Dbo");
                });

            modelBuilder.Entity("NodeTreeTest.DataAccess.Abstractions.Entities.TokenNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("TokenNode","Dbo");
                });

            modelBuilder.Entity("NodeTreeTest.DataAccess.Abstractions.Entities.Token", b =>
                {
                    b.HasOne("NodeTreeTest.DataAccess.Abstractions.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("NodeTreeTest.DataAccess.Abstractions.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<int>("TokenId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Value")
                                .HasColumnName("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TokenId");

                            b1.ToTable("Token");

                            b1.WithOwner()
                                .HasForeignKey("TokenId");
                        });
                });

            modelBuilder.Entity("NodeTreeTest.DataAccess.Abstractions.Entities.TokenNode", b =>
                {
                    b.HasOne("NodeTreeTest.DataAccess.Abstractions.Entities.Token", "Child")
                        .WithMany("ParentTokens")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NodeTreeTest.DataAccess.Abstractions.Entities.Token", "Parent")
                        .WithMany("ChildrenTokens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
